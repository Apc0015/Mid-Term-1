# -*- coding: utf-8 -*-
"""proipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HYInbNUEgQnbKO0E1PWGpVEpoFJcMdMI
"""


import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import folium
from folium.plugins import MarkerCluster
from streamlit_folium import folium_static  # This needs to be installed: pip install streamlit-folium
import plotly.express as px
import plotly.graph_objects as go
from geopy.distance import geodesic
import base64
from io import BytesIO
from scipy import stats  # For percentile calculations
import re

# Set page configuration
st.set_page_config(
    page_title="JFK Airport Analysis",
    page_icon="✈️",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Add custom CSS for styling
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        color: #0078B0;
        text-align: center;
    }
    .section-header {
        font-size: 1.8rem;
        color: #003366;
        padding-top: 1rem;
    }
    .subsection-header {
        font-size: 1.3rem;
        color: #0055A4;
    }
    .highlight {
        background-color: #F0F8FF;
        padding: 1rem;
        border-radius: 0.5rem;
    }
</style>
""", unsafe_allow_html=True)

# Application title
st.markdown("<h1 class='main-header'>JFK International Airport Infrastructure Analysis</h1>", unsafe_allow_html=True)
st.write("An interactive analysis of JFK's geographical position, connectivity, and regional significance")

# Define sidebar for navigation
st.sidebar.title("Navigation")
section = st.sidebar.radio(
    "Select Section",
    ["Overview", "Geographical Context", "Regional Airport Ecosystem",
     "Route Analysis", "Comparative Analysis", "Dashboard"]
)

# Load data function
@st.cache_data
def load_data():
    # Load your merged dataset
    df = pd.read_csv('/content/airports_merged.csv')
    return df

# Try to load data and handle potential errors
try:
    data = load_data()
    st.sidebar.success("Data loaded successfully!")
except Exception as e:
    st.sidebar.error(f"Error loading data: {e}")
    st.stop()

# Main function to control app flow
def main():
    # Display selected section
    if section == "Overview":
        display_overview()
    elif section == "Geographical Context":
        display_geographical_context()
    elif section == "Regional Airport Ecosystem":
        display_regional_ecosystem()
    elif section == "Route Analysis":
        display_route_analysis()
    elif section == "Comparative Analysis":
        display_comparative_analysis()
    elif section == "Dashboard":
        display_dashboard()

# Define functions for each section (we'll implement these next)
# These will be implemented in the following steps

if __name__ == "__main__":
    main()

def display_overview():
    st.markdown("<h2 class='section-header'>JFK International Airport Overview</h2>", unsafe_allow_html=True)

    # Create two columns
    col1, col2 = st.columns([3, 2])

    with col1:
        st.markdown("""
        John F. Kennedy International Airport (JFK) is one of the major international gateways
        in the United States, located in Queens, New York City. This analysis examines JFK's
        strategic importance, geographical positioning, and connectivity within the national
        and global aviation network.

        Key highlights of this analysis include:
        - Strategic geographical position on the U.S. East Coast
        - Regional airport ecosystem and metropolitan airport system
        - Potential domestic and international route networks
        - Comparative analysis with other major U.S. airports
        - Architectural and operational significance
        """)

        # Display key information about JFK
        jfk_airport = find_jfk_airport(data)
        if not jfk_airport.empty:
            jfk_info = jfk_airport.iloc[0]

            st.markdown("<h3 class='subsection-header'>JFK Airport Facts</h3>", unsafe_allow_html=True)
            st.markdown("<div class='highlight'>", unsafe_allow_html=True)
            st.write(f"**Name:** {jfk_info['name']}")
            st.write(f"**Location:** {jfk_info['municipality']}, {jfk_info['iso_region'].split('-')[1]}")
            st.write(f"**Coordinates:** {jfk_info['latitude_deg']:.4f}°, {jfk_info['longitude_deg']:.4f}°")
            st.write(f"**Elevation:** {jfk_info['elevation_ft']} feet")
            st.write(f"**Type:** {jfk_info['type']}")
            if 'wikipedia_link' in jfk_info and pd.notna(jfk_info['wikipedia_link']):
                st.write(f"**Wikipedia:** [{jfk_info['name']}]({jfk_info['wikipedia_link']})")
            st.markdown("</div>", unsafe_allow_html=True)

    with col2:
        # Display a simple map showing JFK's location
        if not jfk_airport.empty:
            jfk_info = jfk_airport.iloc[0]
            jfk_map = folium.Map(
                location=[jfk_info['latitude_deg'], jfk_info['longitude_deg']],
                zoom_start=10
            )
            folium.Marker(
                location=[jfk_info['latitude_deg'], jfk_info['longitude_deg']],
                popup=jfk_info['name'],
                icon=folium.Icon(color='red', icon='plane', prefix='fa')
            ).add_to(jfk_map)

            # Display the map
            st.write("**JFK Airport Location:**")
            folium_static(jfk_map)

    # Navigation buttons
    st.markdown("---")
    next_section = st.button("Next: Geographical Context")
    if next_section:
        st.session_state.section = "Geographical Context"
        st.experimental_rerun()

# Helper function to find JFK in the dataset
def find_jfk_airport(df):
    # Try different approaches to find JFK
    jfk_airport = df[
        (df['name'].str.contains('Kennedy', case=False, na=False)) &
        (df['municipality'] == 'New York')
    ]

    if jfk_airport.empty:
        jfk_airport = df[
            (df['ident'] == 'KJFK') |
            (df['ident'] == 'JFK')
        ]

    if jfk_airport.empty:
        ny_airports = df[
            (df['municipality'] == 'New York') &
            (df['type'].isin(['large_airport', 'medium_airport']))
        ]

        for idx, row in ny_airports.iterrows():
            if 'kennedy' in row['name'].lower():
                jfk_airport = ny_airports.loc[[idx]]
                break

    return jfk_airport

def display_overview():
    st.markdown("<h2 class='section-header'>JFK International Airport Overview</h2>", unsafe_allow_html=True)

    # Create two columns
    col1, col2 = st.columns([3, 2])

    with col1:
        st.markdown("""
        John F. Kennedy International Airport (JFK) is one of the major international gateways
        in the United States, located in Queens, New York City. This analysis examines JFK's
        strategic importance, geographical positioning, and connectivity within the national
        and global aviation network.

        Key highlights of this analysis include:
        - Strategic geographical position on the U.S. East Coast
        - Regional airport ecosystem and metropolitan airport system
        - Potential domestic and international route networks
        - Comparative analysis with other major U.S. airports
        - Architectural and operational significance
        """)

        # Display key information about JFK
        jfk_airport = find_jfk_airport(data)
        if not jfk_airport.empty:
            jfk_info = jfk_airport.iloc[0]

            st.markdown("<h3 class='subsection-header'>JFK Airport Facts</h3>", unsafe_allow_html=True)
            st.markdown("<div class='highlight'>", unsafe_allow_html=True)
            st.write(f"**Name:** {jfk_info['name']}")
            st.write(f"**Location:** {jfk_info['municipality']}, {jfk_info['iso_region'].split('-')[1]}")
            st.write(f"**Coordinates:** {jfk_info['latitude_deg']:.4f}°, {jfk_info['longitude_deg']:.4f}°")
            st.write(f"**Elevation:** {jfk_info['elevation_ft']} feet")
            st.write(f"**Type:** {jfk_info['type']}")
            if 'wikipedia_link' in jfk_info and pd.notna(jfk_info['wikipedia_link']):
                st.write(f"**Wikipedia:** [{jfk_info['name']}]({jfk_info['wikipedia_link']})")
            st.markdown("</div>", unsafe_allow_html=True)

    with col2:
        # Display a simple map showing JFK's location
        if not jfk_airport.empty:
            jfk_info = jfk_airport.iloc[0]
            jfk_map = folium.Map(
                location=[jfk_info['latitude_deg'], jfk_info['longitude_deg']],
                zoom_start=10
            )
            folium.Marker(
                location=[jfk_info['latitude_deg'], jfk_info['longitude_deg']],
                popup=jfk_info['name'],
                icon=folium.Icon(color='red', icon='plane', prefix='fa')
            ).add_to(jfk_map)

            # Display the map
            st.write("**JFK Airport Location:**")
            folium_static(jfk_map)

    # Navigation buttons
    st.markdown("---")
    next_section = st.button("Next: Geographical Context")
    if next_section:
        st.session_state.section = "Geographical Context"
        st.experimental_rerun()

# Helper function to find JFK in the dataset
def find_jfk_airport(df):
    # Try different approaches to find JFK
    jfk_airport = df[
        (df['name'].str.contains('Kennedy', case=False, na=False)) &
        (df['municipality'] == 'New York')
    ]

    if jfk_airport.empty:
        jfk_airport = df[
            (df['ident'] == 'KJFK') |
            (df['ident'] == 'JFK')
        ]

    if jfk_airport.empty:
        ny_airports = df[
            (df['municipality'] == 'New York') &
            (df['type'].isin(['large_airport', 'medium_airport']))
        ]

        for idx, row in ny_airports.iterrows():
            if 'kennedy' in row['name'].lower():
                jfk_airport = ny_airports.loc[[idx]]
                break

    return jfk_airport

def display_geographical_context():
    st.markdown("<h2 class='section-header'>Geographical Context and Physical Infrastructure</h2>", unsafe_allow_html=True)

    jfk_airport = find_jfk_airport(data)
    if jfk_airport.empty:
        st.error("JFK Airport information not found in the dataset.")
        return

    jfk_info = jfk_airport.iloc[0]

    # Strategic Location
    st.markdown("<h3 class='subsection-header'>Strategic Location</h3>", unsafe_allow_html=True)
    col1, col2 = st.columns([1, 1])

    with col1:
        st.write("""
        JFK occupies a prime geographical position on the northeastern edge of the United States.
        This strategic location makes it an ideal gateway for transatlantic routes, providing a
        proximity advantage for European connections compared to airports in the central or western United States.
        """)

        # US center coordinates
        us_center_lat, us_center_lon = 39.8283, -98.5795

        # Calculate distance from JFK to US center
        distance_to_center = geodesic(
            (jfk_info['latitude_deg'], jfk_info['longitude_deg']),
            (us_center_lat, us_center_lon)
        ).miles

        st.markdown("<div class='highlight'>", unsafe_allow_html=True)
        st.write(f"**Distance from US Geographical Center:** {distance_to_center:.1f} miles")
        st.write(f"**Position:** JFK is located near the northeastern edge of the United States")
        st.write(f"**Proximity Advantage:** Approximately 1,000-2,000 fewer miles to major European destinations compared to central US airports")
        st.markdown("</div>", unsafe_allow_html=True)

    with col2:
        # Create a map showing JFK and US center
        us_map = folium.Map(
            location=[us_center_lat, us_center_lon],
            zoom_start=4
        )

        # Add JFK marker
        folium.Marker(
            location=[jfk_info['latitude_deg'], jfk_info['longitude_deg']],
            popup=jfk_info['name'],
            icon=folium.Icon(color='red', icon='plane', prefix='fa')
        ).add_to(us_map)

        # Add US center marker
        folium.Marker(
            location=[us_center_lat, us_center_lon],
            popup="US Geographical Center",
            icon=folium.Icon(color='blue', icon='map-pin', prefix='fa')
        ).add_to(us_map)

        # Add line connecting JFK to US center
        folium.PolyLine(
            locations=[
                [jfk_info['latitude_deg'], jfk_info['longitude_deg']],
                [us_center_lat, us_center_lon]
            ],
            color='green',
            weight=2,
            opacity=0.8,
            popup=f"Distance: {distance_to_center:.1f} miles"
        ).add_to(us_map)

        folium_static(us_map)

    # Elevation and Terrain
    st.markdown("<h3 class='subsection-header'>Elevation and Terrain</h3>", unsafe_allow_html=True)

    col1, col2 = st.columns([1, 1])

    with col1:
        st.write("""
        JFK is built at a relatively low elevation, which is architecturally advantageous as it minimizes
        performance constraints on aircraft during takeoff and landing operations. The surrounding
        terrain is predominantly flat, benefiting operational safety with unobstructed approach and departure paths.
        """)

        st.markdown("<div class='highlight'>", unsafe_allow_html=True)
        st.write(f"**Elevation:** {jfk_info['elevation_ft']} feet above sea level")
        st.write("**Terrain:** Predominantly flat, coastal terrain")
        st.write("**Operational Advantage:** Minimal elevation-related performance constraints")
        st.markdown("</div>", unsafe_allow_html=True)

    with col2:
        # Create a chart comparing JFK's elevation with other major airports
        east_coast_states = ['US-ME', 'US-NH', 'US-MA', 'US-RI', 'US-CT', 'US-NY',
                            'US-NJ', 'US-DE', 'US-MD', 'US-VA', 'US-NC', 'US-SC',
                            'US-GA', 'US-FL', 'US-DC', 'US-PA']

        east_coast_airports = data[
            (data['iso_region'].isin(east_coast_states)) &
            (data['iso_country'] == 'US') &
            (data['type'].isin(['large_airport', 'medium_airport']))
        ]

        # Get top 10 airports by elevation
        top_elevations = east_coast_airports.sort_values('elevation_ft', ascending=False).head(10)

        # Add JFK if not in top 10
        if jfk_info['id'] not in top_elevations['id'].values:
            jfk_row = jfk_airport.copy()
            jfk_row['name'] = 'JFK Airport'  # Shortened name for display
            top_elevations = pd.concat([top_elevations, jfk_row])

        # Create the chart
        fig, ax = plt.subplots(figsize=(10, 6))
        bars = sns.barplot(
            x='name',
            y='elevation_ft',
            data=top_elevations,
            palette='viridis',
            ax=ax
        )

        # Highlight JFK
        for i, airport_id in enumerate(top_elevations['id']):
            if airport_id == jfk_info['id']:
                bars.patches[i].set_facecolor('red')

        plt.title('Elevation Comparison of Major East Coast Airports', fontsize=14)
        plt.xlabel('Airport', fontsize=12)
        plt.ylabel('Elevation (feet)', fontsize=12)
        plt.xticks(rotation=90)
        plt.grid(axis='y', alpha=0.3)
        plt.tight_layout()

        # Display the plot
        st.pyplot(fig)

    # Physical Layout section
    st.markdown("<h3 class='subsection-header'>Physical Layout and Expansion Constraints</h3>", unsafe_allow_html=True)

    st.write("""
    JFK's physical infrastructure exists within a constrained geographical footprint, bordered by
    Jamaica Bay to the southeast and dense urban development in other directions. This creates both
    architectural challenges and opportunities, requiring efficient use of available land through
    a compact terminal architecture with sophisticated internal transportation systems.
    """)

    # If we had satellite imagery, we could display it here

    # Navigation buttons
    st.markdown("---")
    col1, col2 = st.columns([1, 1])
    with col1:
        prev_section = st.button("Previous: Overview")
        if prev_section:
            st.session_state.section = "Overview"
            st.experimental_rerun()

    with col2:
        next_section = st.button("Next: Regional Airport Ecosystem")
        if next_section:
            st.session_state.section = "Regional Airport Ecosystem"
            st.experimental_rerun()

def display_regional_ecosystem():
    st.markdown("<h2 class='section-header'>Regional Airport Ecosystem Analysis</h2>", unsafe_allow_html=True)

    jfk_airport = find_jfk_airport(data)
    if jfk_airport.empty:
        st.error("JFK Airport information not found in the dataset.")
        return

    jfk_info = jfk_airport.iloc[0]

    # Metropolitan Airport System
    st.markdown("<h3 class='subsection-header'>Metropolitan Airport System</h3>", unsafe_allow_html=True)

    st.write("""
    JFK operates within a complex regional airport ecosystem. It is part of New York City's
    three-airport system, alongside LaGuardia Airport and Newark Liberty International Airport.
    This tripartite airport architecture is relatively uncommon and creates unique airspace
    management challenges and operational interdependencies.
    """)

    # Calculate distances from JFK to all other airports
    regional_airports = data.copy()
    regional_airports['distance_to_jfk'] = regional_airports.apply(
        lambda row: geodesic(
            (jfk_info['latitude_deg'], jfk_info['longitude_deg']),
            (row['latitude_deg'], row['longitude_deg'])
        ).miles,
        axis=1
    )

    # Filter for airports within 200 miles of JFK
    nearby_airports = regional_airports[regional_airports['distance_to_jfk'] <= 200]

    col1, col2 = st.columns([2, 1])

    with col1:
        # Create a detailed regional map
        regional_map = folium.Map(
            location=[jfk_info['latitude_deg'], jfk_info['longitude_deg']],
            zoom_start=8
        )

        # Add JFK with special marker
        folium.Marker(
            location=[jfk_info['latitude_deg'], jfk_info['longitude_deg']],
            popup=jfk_info['name'],
            icon=folium.Icon(color='red', icon='plane', prefix='fa')
        ).add_to(regional_map)

        # Add other airports with different colors by type
        for idx, row in nearby_airports[nearby_airports['id'] != jfk_info['id']].iterrows():
            # Choose color based on airport type
            if 'large_airport' in row['type']:
                color = 'darkblue'
            elif 'medium_airport' in row['type']:
                color = 'blue'
            elif 'small_airport' in row['type']:
                color = 'lightblue'
            else:
                color = 'gray'

            folium.CircleMarker(
                location=[row['latitude_deg'], row['longitude_deg']],
                radius=5,
                popup=f"{row['name']} ({row['type']})<br>Distance from JFK: {row['distance_to_jfk']:.1f} miles",
                color=color,
                fill=True,
                fill_color=color
            ).add_to(regional_map)

        # Add circle showing 50, 100 and 200 mile radius from JFK
        folium.Circle(
            location=[jfk_info['latitude_deg'], jfk_info['longitude_deg']],
            radius=50 * 1609.34,  # Convert miles to meters
            color='green',
            fill=True,
            fill_opacity=0.05,
            popup='50 mile radius'
        ).add_to(regional_map)

        folium.Circle(
            location=[jfk_info['latitude_deg'], jfk_info['longitude_deg']],
            radius=100 * 1609.34,  # Convert miles to meters
            color='yellow',
            fill=True,
            fill_opacity=0.03,
            popup='100 mile radius'
        ).add_to(regional_map)

        folium.Circle(
            location=[jfk_info['latitude_deg'], jfk_info['longitude_deg']],
            radius=200 * 1609.34,  # Convert miles to meters
            color='orange',
            fill=True,
            fill_opacity=0.01,
            popup='200 mile radius'
        ).add_to(regional_map)

        folium_static(regional_map)

    with col2:
        # Display statistics about nearby airports
        st.markdown("<div class='highlight'>", unsafe_allow_html=True)
        st.write(f"**Airports within 200 miles of JFK:** {len(nearby_airports)}")

        # Breakdown by type
        st.write("**Breakdown by type:**")
        type_counts = nearby_airports['type'].value_counts()
        for airport_type, count in type_counts.items():
            st.write(f"- {airport_type}: {count}")

        # Find nearby major airports
        nearby_major = nearby_airports[nearby_airports['type'] == 'large_airport']
        st.write(f"**Major airports within 200 miles:** {len(nearby_major)}")
        for idx, row in nearby_major.iterrows():
            if row['id'] != jfk_info['id']:
                st.write(f"- {row['name']} ({row['distance_to_jfk']:.1f} miles)")

        st.markdown("</div>", unsafe_allow_html=True)

    # Hierarchical Position
    st.markdown("<h3 class='subsection-header'>Hierarchical Position</h3>", unsafe_allow_html=True)

    col1, col2 = st.columns([1, 1])

    with col1:
        st.write("""
        Within the regional airport hierarchy, JFK maintains a distinct position as a primarily
        international gateway, while LaGuardia focuses on domestic routes, and Newark serves a mixed purpose.
        This architectural specialization represents an efficient division of functional responsibilities
        that maximizes the capacity of the regional airspace.
        """)

    with col2:
        # Create a pie chart showing distribution of airport types
        fig, ax = plt.subplots(figsize=(8, 8))
        nearby_types = nearby_airports['type'].value_counts()
        ax.pie(
            nearby_types,
            labels=nearby_types.index,
            autopct='%1.1f%%',
            startangle=90,
            colors=plt.cm.viridis(np.linspace(0, 1, len(nearby_types)))
        )
        ax.set_title('Airport Types within 200 miles of JFK')
        ax.axis('equal')

        # Display the plot
        st.pyplot(fig)

    # Supporting Infrastructure
    st.markdown("<h3 class='subsection-header'>Supporting Infrastructure</h3>", unsafe_allow_html=True)

    st.write("""
    The regional analysis reveals a substantial network of smaller airports that play supporting
    roles in the overall aviation architecture. These facilities serve to distribute air traffic
    throughout the region, relieving pressure on major hubs like JFK and providing specialized
    services for general aviation, cargo operations, and regional connectivity.
    """)

    # Display a bar chart of airports by distance from JFK
    distance_bins = [0, 50, 100, 150, 200]
    distance_labels = ['0-50', '51-100', '101-150', '151-200']

    nearby_airports['distance_bin'] = pd.cut(
        nearby_airports['distance_to_jfk'],
        bins=distance_bins,
        labels=distance_labels
    )

    distance_counts = nearby_airports['distance_bin'].value_counts().sort_index()

    fig, ax = plt.subplots(figsize=(10, 6))
    bars = sns.barplot(
        x=distance_counts.index,
        y=distance_counts.values,
        palette='viridis',
        ax=ax
    )

    plt.title('Distribution of Airports by Distance from JFK (miles)', fontsize=14)
    plt.xlabel('Distance Range (miles)', fontsize=12)
    plt.ylabel('Number of Airports', fontsize=12)
    plt.grid(axis='y', alpha=0.3)
    plt.tight_layout()

    # Display the plot
    st.pyplot(fig)

    # Navigation buttons
    st.markdown("---")
    col1, col2 = st.columns([1, 1])
    with col1:
        prev_section = st.button("Previous: Geographical Context")
        if prev_section:
            st.session_state.section = "Geographical Context"
            st.experimental_rerun()

    with col2:
        next_section = st.button("Next: Route Analysis")
        if next_section:
            st.session_state.section = "Route Analysis"
            st.experimental_rerun()

def display_route_analysis():
    st.markdown("<h2 class='section-header'>Route Architecture and Connectivity Patterns</h2>", unsafe_allow_html=True)

    jfk_airport = find_jfk_airport(data)
    if jfk_airport.empty:
        st.error("JFK Airport information not found in the dataset.")
        return

    jfk_info = jfk_airport.iloc[0]

    # Domestic Network Architecture
    st.markdown("<h3 class='subsection-header'>Domestic Network Architecture</h3>", unsafe_allow_html=True)

    st.write("""
    Based on proximity analysis, JFK has access to a comprehensive domestic route architecture
    spanning the entire Eastern Seaboard. The airport is positioned within effective connection
    range of major metropolitan areas from Boston to Miami, with particularly strong potential
    connectivity to urban centers in the Northeast Corridor.
    """)

    # Define U.S. East Coast regions (states)
    east_coast_states = ['US-ME', 'US-NH', 'US-MA', 'US-RI', 'US-CT', 'US-NY',
                        'US-NJ', 'US-DE', 'US-MD', 'US-VA', 'US-NC', 'US-SC',
                        'US-GA', 'US-FL', 'US-DC', 'US-PA']

    # Filter for large and medium airports on the East Coast
    east_coast_airports = data[
        (data['iso_region'].isin(east_coast_states)) &
        (data['iso_country'] == 'US') &
        (data['type'].isin(['large_airport', 'medium_airport']))
    ]

    # Calculate distances from JFK to these airports
    east_coast_airports['distance_to_jfk'] = east_coast_airports.apply(
        lambda row: geodesic(
            (jfk_info['latitude_deg'], jfk_info['longitude_deg']),
            (row['latitude_deg'], row['longitude_deg'])
        ).miles,
        axis=1
    )

    # Sort by distance (excluding JFK itself)
    potential_domestic_routes = east_coast_airports[
        east_coast_airports['id'] != jfk_info['id']
    ].sort_values('distance_to_jfk')

    col1, col2 = st.columns([2, 1])

    with col1:
        # Create a map showing potential domestic routes
        domestic_map = folium.Map(
            location=[39, -78],
            zoom_start=5
        )

        # Add JFK marker
        folium.Marker(
            location=[jfk_info['latitude_deg'], jfk_info['longitude_deg']],
            popup=jfk_info['name'],
            icon=folium.Icon(color='red', icon='plane', prefix='fa')
        ).add_to(domestic_map)

        # Add potential domestic destinations and routes
        for idx, row in potential_domestic_routes.head(15).iterrows():
            # Add marker for destination
            folium.CircleMarker(
                location=[row['latitude_deg'], row['longitude_deg']],
                radius=5,
                popup=f"{row['name']}<br>{row['municipality']}, {row['iso_region'].split('-')[1]}<br>Distance from JFK: {row['distance_to_jfk']:.1f} miles",
                color='blue',
                fill=True,
                fill_color='blue'
            ).add_to(domestic_map)

            # Add route line
            folium.PolyLine(
                locations=[
                    [jfk_info['latitude_deg'], jfk_info['longitude_deg']],
                    [row['latitude_deg'], row['longitude_deg']]
                ],
                color='blue',
                weight=2,
                opacity=0.5,
                popup=f"Distance: {row['distance_to_jfk']:.1f} miles"
            ).add_to(domestic_map)

        folium_static(domestic_map)

    with col2:
        st.markdown("<div class='highlight'>", unsafe_allow_html=True)
        st.write("**Top 10 Potential Domestic Connections**")

        # Display table of top domestic destinations
        top_domestic = potential_domestic_routes.head(10)[['name', 'municipality', 'iso_region', 'distance_to_jfk']]
        top_domestic['State'] = top_domestic['iso_region'].apply(lambda x: x.split('-')[1])

        # Format the table
        formatted_domestic = top_domestic[['name', 'municipality', 'State', 'distance_to_jfk']]
        formatted_domestic.columns = ['Airport', 'City', 'State', 'Distance (miles)']
        formatted_domestic['Distance (miles)'] = formatted_domestic['Distance (miles)'].round(1)

        st.table(formatted_domestic)
        st.markdown("</div>", unsafe_allow_html=True)

    # International Connectivity Design
    st.markdown("<h3 class='subsection-header'>International Connectivity Design</h3>", unsafe_allow_html=True)

    st.write("""
    JFK's architectural significance is perhaps most evident in its potential international route
    structure. The airport's geographical position enables efficient connections to major European
    hubs, with cities such as London, Paris, and Frankfurt all falling within optimal direct flight range.
    """)

    # Identify major international airports that might connect with JFK
    int_airports = data[
        (data['iso_country'] != 'US') &
        (data['type'] == 'large_airport')
    ]

    # Calculate distances from JFK to these international airports
    int_airports['distance_to_jfk'] = int_airports.apply(
        lambda row: geodesic(
            (jfk_info['latitude_deg'], jfk_info['longitude_deg']),
            (row['latitude_deg'], row['longitude_deg'])
        ).miles,
        axis=1
    )

    # Sort by distance and get the top international connections
    max_intl_distance = 4000  # Upper limit for most long-haul flights
    top_int_airports = int_airports[
        int_airports['distance_to_jfk'] <= max_intl_distance
    ].sort_values('distance_to_jfk').head(15)

    col1, col2 = st.columns([2, 1])

    with col1:
        # Create a map showing potential international routes
        international_map = folium.Map(
            location=[39, -78],
            zoom_start=5
        )

        # Add JFK marker
        folium.Marker(
            location=[jfk_info['latitude_deg'], jfk_info['longitude_deg']],
            popup=jfk_info['name'],
            icon=folium.Icon(color='red', icon='plane', prefix='fa')
        ).add_to(intl_map)

        # Add potential international destinations and routes
        for idx, row in top_int_airports.iterrows():
            # Add marker for destination
            folium.CircleMarker(
                location=[row['latitude_deg'], row['longitude_deg']],
                radius=5,
                popup=f"{row['name']}<br>{row['municipality']}, {row['iso_country']}<br>Distance from JFK: {row['distance_to_jfk']:.1f} miles",
                color='orange',
                fill=True,
                fill_color='orange'
            ).add_to(intl_map)

            # Add route line
            folium.PolyLine(
                locations=[
                    [jfk_info['latitude_deg'], jfk_info['longitude_deg']],
                    [row['latitude_deg'], row['longitude_deg']]
                ],
                color='red',
                weight=2,
                opacity=0.5,
                popup=f"Distance: {row['distance_to_jfk']:.1f} miles"
            ).add_to(intl_map)

        folium_static(intl_map)

    with col2:
        st.markdown("<div class='highlight'>", unsafe_allow_html=True)
        st.write("**Top 10 Potential International Connections**")

        # Display table of top international destinations
        top_intl = top_int_airports.head(10)[['name', 'municipality', 'iso_country', 'distance_to_jfk']]

        # Format the table
        formatted_intl = top_intl[['name', 'municipality', 'iso_country', 'distance_to_jfk']]
        formatted_intl.columns = ['Airport', 'City', 'Country', 'Distance (miles)']
        formatted_intl['Distance (miles)'] = formatted_intl['Distance (miles)'].round(1)

        st.table(formatted_intl)
        st.markdown("</div>", unsafe_allow_html=True)

    # Network Centrality and Hub Functions
    st.markdown("<h3 class='subsection-header'>Network Centrality and Hub Functions</h3>", unsafe_allow_html=True)

    st.write("""
    When analyzed through the lens of network architecture, JFK demonstrates high centrality values,
    suggesting its importance as a connecting node within the broader aviation system. The airport's
    potential to serve as a gateway hub between domestic and international routes creates architectural
    efficiencies in the overall network, reducing the need for duplicate infrastructure at multiple smaller gateways.
    """)

    # Create a visualization showing JFK as a hub
    # Combine domestic and international connections for visualization
    all_connections = pd.concat([
        potential_domestic_routes.head(10)[['name', 'latitude_deg', 'longitude_deg', 'distance_to_jfk', 'iso_country']],
        top_int_airports.head(10)[['name', 'latitude_deg', 'longitude_deg', 'distance_to_jfk', 'iso_country']]
    ])

    # Create Plotly network diagram
    fig = go.Figure()

    # Add connection lines
    for idx, row in all_connections.iterrows():
        fig.add_trace(
            go.Scattergeo(
                lon=[jfk_info['longitude_deg'], row['longitude_deg']],
                lat=[jfk_info['latitude_deg'], row['latitude_deg']],
                mode='lines',
                line=dict(
                    width=1.5,
                    color='blue' if row['iso_country'] == 'US' else 'red'
                ),
                opacity=0.7,
                showlegend=False
            )
        )

    # Add destination points
    fig.add_trace(
        go.Scattergeo(
            lon=all_connections['longitude_deg'],
            lat=all_connections['latitude_deg'],
            text=all_connections['name'],
            mode='markers',
            marker=dict(
                size=8,
                color=['blue' if country == 'US' else 'red' for country in all_connections['iso_country']],
                line=dict(width=1, color='black')
            ),
            name='Connected Airports'
        )
    )

    # Add JFK as the hub
    fig.add_trace(
        go.Scattergeo(
            lon=[jfk_info['longitude_deg']],
            lat=[jfk_info['latitude_deg']],
            text=['JFK Airport'],
            mode='markers',
            marker=dict(
                size=15,
                color='green',
                symbol='star',
                line=dict(width=1, color='black')
            ),
            name='JFK Hub'
        )
    )

    # Configure the layout
    fig.update_layout(
        title='JFK as a Central Hub in the Aviation Network',
        geo=dict(
            projection_type='natural earth',
            showland=True,
            landcolor='rgb(243, 243, 243)',
            countrycolor='rgb(204, 204, 204)',
            showcountries=True,
            oceancolor='rgb(234, 241, 247)',
            showocean=True
        ),
        height=600,
        legend=dict(
            x=0,
            y=1,
            bgcolor='rgba(255, 255, 255, 0.8)'
        )
    )

    st.plotly_chart(fig, use_container_width=True)

    # Navigation buttons
    st.markdown("---")
    col1, col2 = st.columns([1, 1])
    with col1:
        prev_section = st.button("Previous: Regional Airport Ecosystem")
        if prev_section:
            st.session_state.section = "Regional Airport Ecosystem"
            st.experimental_rerun()

    with col2:
        next_section = st.button("Next: Comparative Analysis")
        if next_section:
            st.session_state.section = "Comparative Analysis"
            st.experimental_rerun()

def display_comparative_analysis():
    st.markdown("<h2 class='section-header'>Comparative Airport Architecture</h2>", unsafe_allow_html=True)

    jfk_airport = find_jfk_airport(data)
    if jfk_airport.empty:
        st.error("JFK Airport information not found in the dataset.")
        return

    jfk_info = jfk_airport.iloc[0]

    # East Coast Airport Typology
    st.markdown("<h3 class='subsection-header'>East Coast Airport Typology</h3>", unsafe_allow_html=True)

    st.write("""
    Among major airports in the Eastern United States, JFK distinguishes itself through several
    architectural characteristics, including its runway system, terminal configuration, and ground
    transportation infrastructure. The airport exemplifies a particular architectural typology
    optimized for high-volume international operations with substantial connecting traffic.
    """)

    # Define U.S. East Coast regions (states)
    east_coast_states = ['US-ME', 'US-NH', 'US-MA', 'US-RI', 'US-CT', 'US-NY',
                        'US-NJ', 'US-DE', 'US-MD', 'US-VA', 'US-NC', 'US-SC',
                        'US-GA', 'US-FL', 'US-DC', 'US-PA']

    # Filter for large airports on the East Coast
    large_ec_airports = data[
        (data['iso_region'].isin(east_coast_states)) &
        (data['iso_country'] == 'US') &
        (data['type'] == 'large_airport')
    ]

    # Calculate distances from US center
    us_center_lat, us_center_lon = 39.8283, -98.5795
    large_ec_airports['distance_from_center'] = large_ec_airports.apply(
        lambda row: geodesic(
            (us_center_lat, us_center_lon),
            (row['latitude_deg'], row['longitude_deg'])
        ).miles,
        axis=1
    )

    col1, col2 = st.columns([2, 1])

    with col1:
        # Create visualization showing distribution of major EC airports
        fig = px.scatter_mapbox(
            large_ec_airports,
            lat="latitude_deg",
            lon="longitude_deg",
            hover_name="name",
            hover_data=["municipality", "elevation_ft"],
            color="elevation_ft",
            size=[15] * len(large_ec_airports),
            zoom=4,
            height=600,
            mapbox_style="carto-positron",
            title="Major East Coast Airports by Elevation"
        )

        # Highlight JFK with a different marker
        fig.add_trace(
            go.Scattermapbox(
                lat=[jfk_info['latitude_deg']],
                lon=[jfk_info['longitude_deg']],
                mode='markers',
                marker=dict(size=20, color='red'),
                text=['JFK Airport'],
                name='JFK Airport'
            )
        )

        st.plotly_chart(fig, use_container_width=True)

    with col2:
        st.markdown("<div class='highlight'>", unsafe_allow_html=True)
        st.write("**Major East Coast Airports Comparison**")

        # Create comparison metrics
        st.write(f"**Number of large airports:** {len(large_ec_airports)}")
        st.write(f"**Average elevation:** {large_ec_airports['elevation_ft'].mean():.1f} feet")
        st.write(f"**JFK elevation:** {jfk_info['elevation_ft']} feet")
        st.write(f"**Average distance from US center:** {large_ec_airports['distance_from_center'].mean():.1f} miles")
        st.write(f"**JFK distance from US center:** {large_ec_airports[large_ec_airports['id'] == jfk_info['id']]['distance_from_center'].values[0]:.1f} miles")

        st.markdown("</div>", unsafe_allow_html=True)

    # Classification Context
    st.markdown("<h3 class='subsection-header'>Classification Context</h3>", unsafe_allow_html=True)

    col1, col2 = st.columns([1, 1])

    with col1:
        st.write("""
        Within the U.S. airport classification system, JFK is designated as a large airport, placing
        it in the top tier of American aviation facilities. Large airports constitute only a small
        percentage of total aviation facilities, highlighting JFK's architectural significance within
        the broader infrastructure landscape.
        """)

        # Filter for all U.S. airports
        us_airports = data[data['iso_country'] == 'US']

        # Get counts by type
        us_type_counts = us_airports['type'].value_counts()

        # Calculate percentages
        us_type_percentages = 100 * us_type_counts / us_type_counts.sum()

        st.markdown("<div class='highlight'>", unsafe_allow_html=True)
        st.write(f"**Total U.S. airports:** {len(us_airports)}")
        st.write(f"**Large airports:** {us_type_counts.get('large_airport', 0)} ({us_type_percentages.get('large_airport', 0):.1f}%)")
        st.write(f"**Medium airports:** {us_type_counts.get('medium_airport', 0)} ({us_type_percentages.get('medium_airport', 0):.1f}%)")
        st.write(f"**Small airports:** {us_type_counts.get('small_airport', 0)} ({us_type_percentages.get('small_airport', 0):.1f}%)")
        st.markdown("</div>", unsafe_allow_html=True)

    with col2:
        # Create a pie chart of airport types
        fig, ax = plt.subplots(figsize=(8, 8))

        # Filter to get more meaningful visualization (exclude very small facilities)
        main_types = ['large_airport', 'medium_airport', 'small_airport', 'heliport']
        filtered_counts = us_type_counts[us_type_counts.index.isin(main_types)]

        # Create the pie chart
        ax.pie(
            filtered_counts,
            labels=filtered_counts.index,
            autopct='%1.1f%%',
            startangle=90,
            colors=plt.cm.viridis(np.linspace(0, 1, len(filtered_counts)))
        )
        ax.set_title('U.S. Airport Distribution by Type')
        ax.axis('equal')

        # Display the plot
        st.pyplot(fig)

    # Architectural Evolution
    st.markdown("<h3 class='subsection-header'>Architectural Evolution</h3>", unsafe_allow_html=True)

    st.write("""
    The historical development of JFK reflects broader trends in airport architectural evolution.
    Originally designed in the mid-20th century as New York International Airport (Idlewild),
    the facility has undergone multiple expansions and renovations to adapt to changing aircraft
    technologies, passenger volumes, and security requirements. This ongoing architectural adaptation
    represents a common pattern among major international airports that must continually evolve to
    meet changing demands.
    """)

    # Create a timeline of JFK's development (simplified version)
    timeline_data = {
        'Year': [1948, 1963, 1970, 1990, 2001, 2008, 2022],
        'Event': [
            'Opened as New York International Airport (Idlewild)',
            'Renamed to John F. Kennedy International Airport',
            'Opening of the first jumbo jet facilities',
            'Major terminal expansion and modernization',
            'Post-9/11 security infrastructure enhancements',
            'Opening of JetBlue T5 Terminal',
            'Ongoing JFK Vision Plan transformations'
        ]
    }

    timeline_df = pd.DataFrame(timeline_data)

    # Display the timeline
    st.table(timeline_df)

    # Navigation buttons
    st.markdown("---")
    col1, col2 = st.columns([1, 1])
    with col1:
        prev_section = st.button("Previous: Route Analysis")
        if prev_section:
            st.session_state.section = "Route Analysis"
            st.experimental_rerun()

    with col2:
        next_section = st.button("Next: Dashboard")
        if next_section:
            st.session_state.section = "Dashboard"
            st.experimental_rerun()

def display_dashboard():
    st.markdown("<h2 class='section-header'>JFK Airport Comprehensive Dashboard</h2>", unsafe_allow_html=True)

    jfk_airport = find_jfk_airport(data)
    if jfk_airport.empty:
        st.error("JFK Airport information not found in the dataset.")
        return

    jfk_info = jfk_airport.iloc[0]

    # Define U.S. East Coast regions (states)
    east_coast_states = ['US-ME', 'US-NH', 'US-MA', 'US-RI', 'US-CT', 'US-NY',
                       'US-NJ', 'US-DE', 'US-MD', 'US-VA', 'US-NC', 'US-SC',
                       'US-GA', 'US-FL', 'US-DC', 'US-PA']

    # Calculate distances from JFK to all other airports
    regional_airports = data.copy()
    regional_airports['distance_to_jfk'] = regional_airports.apply(
        lambda row: geodesic(
            (jfk_info['latitude_deg'], jfk_info['longitude_deg']),
            (row['latitude_deg'], row['longitude_deg'])
        ).miles,
        axis=1
    )

    # Filter for airports within 200 miles of JFK
    nearby_airports = regional_airports[regional_airports['distance_to_jfk'] <= 200]

    # Filter for large and medium airports on the East Coast
    east_coast_airports = data[
        (data['iso_region'].isin(east_coast_states)) &
        (data['iso_country'] == 'US') &
        (data['type'].isin(['large_airport', 'medium_airport']))
    ]

    # Calculate distances from JFK to these airports
    east_coast_airports['distance_to_jfk'] = east_coast_airports.apply(
        lambda row: geodesic(
            (jfk_info['latitude_deg'], jfk_info['longitude_deg']),
            (row['latitude_deg'], row['longitude_deg'])
        ).miles,
        axis=1
    )

    # Sort by distance (excluding JFK itself)
    potential_domestic_routes = east_coast_airports[
        east_coast_airports['id'] != jfk_info['id']
    ].sort_values('distance_to_jfk')

    # Identify major international airports that might connect with JFK
    int_airports = data[
        (data['iso_country'] != 'US') &
        (data['type'] == 'large_airport')
    ]

    # Calculate distances from JFK to these international airports
    int_airports['distance_to_jfk'] = int_airports.apply(
        lambda row: geodesic(
            (jfk_info['latitude_deg'], jfk_info['longitude_deg']),
            (row['latitude_deg'], row['longitude_deg'])
        ).miles,
        axis=1
    )

    # Sort by distance and get the top international connections
    max_intl_distance = 4000  # Upper limit for most long-haul flights
    top_int_airports = int_airports[
        int_airports['distance_to_jfk'] <= max_intl_distance
    ].sort_values('distance_to_jfk').head(15)

    # Create a dashboard with multiple visualizations

    # First row - Key Metrics
    st.markdown("<h3 class='subsection-header'>Key Metrics</h3>", unsafe_allow_html=True)

    col1, col2, col3, col4 = st.columns(4)

    with col1:
        st.metric(
            label="Nearby Airports (200mi)",
            value=len(nearby_airports)
        )

    with col2:
        st.metric(
            label="Potential Domestic Routes",
            value=len(potential_domestic_routes)
        )

    with col3:
        st.metric(
            label="Potential Intl Routes (<4000mi)",
            value=len(top_int_airports)
        )

    with col4:
        # Calculate JFK's percentile rank by elevation among large US airports
        large_us_airports = data[(data['iso_country'] == 'US') & (data['type'] == 'large_airport')]
        elevation_rank = stats.percentileofscore(large_us_airports['elevation_ft'], jfk_info['elevation_ft'])

        st.metric(
            label="Elevation Percentile",
            value=f"{100-elevation_rank:.0f}%",
            help="Percentage of major US airports with higher elevation than JFK"
        )

    # Second row - Maps
    st.markdown("<h3 class='subsection-header'>Geographic Visualizations</h3>", unsafe_allow_html=True)

    tab1, tab2, tab3 = st.tabs(["Regional Context", "Domestic Routes", "International Routes"])

    with tab1:
        # Create a detailed regional map
        regional_map = folium.Map(
            location=[jfk_info['latitude_deg'], jfk_info['longitude_deg']],
            zoom_start=8
        )

        # Add JFK with special marker
        folium.Marker(
            location=[jfk_info['latitude_deg'], jfk_info['longitude_deg']],
            popup=jfk_info['name'],
            icon=folium.Icon(color='red', icon='plane', prefix='fa')
        ).add_to(regional_map)

        # Add other airports with different colors by type
        for idx, row in nearby_airports[nearby_airports['id'] != jfk_info['id']].iterrows():
            # Choose color based on airport type
            if 'large_airport' in row['type']:
                color = 'darkblue'
            elif 'medium_airport' in row['type']:
                color = 'blue'
            elif 'small_airport' in row['type']:
                color = 'lightblue'
            else:
                color = 'gray'

            folium.CircleMarker(
                location=[row['latitude_deg'], row['longitude_deg']],
                radius=5,
                popup=f"{row['name']} ({row['type']})<br>Distance from JFK: {row['distance_to_jfk']:.1f} miles",
                color=color,
                fill=True,
                fill_color=color
            ).add_to(regional_map)

        # Add circle showing 50, 100 and 200 mile radius from JFK
        folium.Circle(
            location=[jfk_info['latitude_deg'], jfk_info['longitude_deg']],
            radius=50 * 1609.34,  # Convert miles to meters
            color='green',
            fill=True,
            fill_opacity=0.05,
            popup='50 mile radius'
        ).add_to(regional_map)

        folium.Circle(
            location=[jfk_info['latitude_deg'], jfk_info['longitude_deg']],
            radius=100 * 1609.34,  # Convert miles to meters
            color='yellow',
            fill=True,
            fill_opacity=0.03,
            popup='100 mile radius'
        ).add_to(regional_map)

        folium.Circle(
            location=[jfk_info['latitude_deg'], jfk_info['longitude_deg']],
            radius=200 * 1609.34,  # Convert miles to meters
            color='orange',
            fill=True,
            fill_opacity=0.01,
            popup='200 mile radius'
        ).add_to(regional_map)

        folium_static(regional_map)

    with tab2:
        # Create a map showing potential domestic routes
        domestic_map = folium.Map(
            location=[39, -78],
            zoom_start=5
        )

        # Add JFK marker
        folium.Marker(
            location=[jfk_info['latitude_deg'], jfk_info['longitude_deg']],
            popup=jfk_info['name'],
            icon=folium.Icon(color='red', icon='plane', prefix='fa')
        ).add_to(domestic_map)

        # Add potential domestic destinations and routes
        for idx, row in potential_domestic_routes.head(15).iterrows():
            # Add marker for destination
            folium.CircleMarker(
                location=[row['latitude_deg'], row['longitude_deg']],
                radius=5,
                popup=f"{row['name']}<br>{row['municipality']}, {row['iso_region'].split('-')[1]}<br>Distance from JFK: {row['distance_to_jfk']:.1f} miles",
                color='blue',
                fill=True,
                fill_color='blue'
            ).add_to(domestic_map)

            # Add route line
            folium.PolyLine(
                locations=[
                    [jfk_info['latitude_deg'], jfk_info['longitude_deg']],
                    [row['latitude_deg'], row['longitude_deg']]
                ],
                color='blue',
                weight=2,
                opacity=0.5,
                popup=f"Distance: {row['distance_to_jfk']:.1f} miles"
            ).add_to(domestic_map)

        folium_static(domestic_map)

    with tab3:
        # Create a map showing potential international routes
        intl_map = folium.Map(
            location=[30, -30],
            zoom_start=3
        )

        # Add JFK marker
        folium.Marker(
            location=[jfk_info['latitude_deg'], jfk_info['longitude_deg']],
            popup=jfk_info['name'],
            icon=folium.Icon(color='red', icon='plane', prefix='fa')
        ).add_to(intl_map)

        # Add potential international destinations and routes
        for idx, row in top_int_airports.iterrows():
            # Add marker for destination
            folium.CircleMarker(
                location=[row['latitude_deg'], row['longitude_deg']],
                radius=5,
                popup=f"{row['name']}<br>{row['municipality']}, {row['iso_country']}<br>Distance from JFK: {row['distance_to_jfk']:.1f} miles",
                color='orange',
                fill=True,
                fill_color='orange'
            ).add_to(intl_map)

            # Add route line
            folium.PolyLine(
                locations=[
                    [jfk_info['latitude_deg'], jfk_info['longitude_deg']],
                    [row['latitude_deg'], row['longitude_deg']]
                ],
                color='red',
                weight=2,
                opacity=0.5,
                popup=f"Distance: {row['distance_to_jfk']:.1f} miles"
            ).add_to(intl_map)

        folium_static(intl_map)

    # Third row - Charts and Analysis
    st.markdown("<h3 class='subsection-header'>Analysis Charts</h3>", unsafe_allow_html=True)

    col1, col2 = st.columns(2)

    with col1:
        # Airport types in region chart
        nearby_types = nearby_airports['type'].value_counts()

        fig = px.pie(
            values=nearby_types.values,
            names=nearby_types.index,
            title='Airport Types within 200 miles of JFK',
            hole=0.4,
            color_discrete_sequence=px.colors.sequential.Viridis
        )

        st.plotly_chart(fig, use_container_width=True)

    with col2:
        # Distance distribution of nearby airports
        distance_bins = [0, 50, 100, 150, 200]
        distance_labels = ['0-50', '51-100', '101-150', '151-200']

        nearby_airports['distance_bin'] = pd.cut(
            nearby_airports['distance_to_jfk'],
            bins=distance_bins,
            labels=distance_labels
        )

        distance_counts = nearby_airports['distance_bin'].value_counts().sort_index()

        fig = px.bar(
            x=distance_counts.index,
            y=distance_counts.values,
            title='Distribution of Airports by Distance from JFK (miles)',
            labels={'x': 'Distance Range (miles)', 'y': 'Number of Airports'},
            color_discrete_sequence=['rgb(59, 82, 139)']
        )

        st.plotly_chart(fig, use_container_width=True)

    # Fourth row - Tables
    st.markdown("<h3 class='subsection-header'>Top Connections</h3>", unsafe_allow_html=True)

    col1, col2 = st.columns(2)

    with col1:
        st.subheader("Top Domestic Destinations")

        # Display table of top domestic destinations
        top_domestic = potential_domestic_routes.head(10)[['name', 'municipality', 'iso_region', 'distance_to_jfk']]
        top_domestic['State'] = top_domestic['iso_region'].apply(lambda x: x.split('-')[1])

        # Format the table
        formatted_domestic = top_domestic[['name', 'municipality', 'State', 'distance_to_jfk']]
        formatted_domestic.columns = ['Airport', 'City', 'State', 'Distance (miles)']
        formatted_domestic['Distance (miles)'] = formatted_domestic['Distance (miles)'].round(1)

        st.table(formatted_domestic)

    with col2:
        st.subheader("Top International Destinations")

        # Display table of top international destinations
        top_intl = top_int_airports.head(10)[['name', 'municipality', 'iso_country', 'distance_to_jfk']]

        # Format the table
        formatted_intl = top_intl[['name', 'municipality', 'iso_country', 'distance_to_jfk']]
        formatted_intl.columns = ['Airport', 'City', 'Country', 'Distance (miles)']
        formatted_intl['Distance (miles)'] = formatted_intl['Distance (miles)'].round(1)

        st.table(formatted_intl)

    # Navigation buttons
    st.markdown("---")
    col1, col2 = st.columns([1, 1])
    with col1:
        prev_section = st.button("Previous: Comparative Analysis")
        if prev_section:
            st.session_state.section = "Comparative Analysis"
            st.experimental_rerun()

    with col2:
        back_to_start = st.button("Back to Overview")
        if back_to_start:
            st.session_state.section = "Overview"
            st.experimental_rerun()

# At the top of your script, after imports
if 'section' not in st.session_state:
    st.session_state.section = "Overview"

# Update main function
def main():
    # Display selected section based on session state
    if st.session_state.section == "Overview":
        display_overview()
    elif st.session_state.section == "Geographical Context":
        display_geographical_context()
    elif st.session_state.section == "Regional Airport Ecosystem":
        display_regional_ecosystem()
    elif st.session_state.section == "Route Analysis":
        display_route_analysis()
    elif st.session_state.section == "Comparative Analysis":
        display_comparative_analysis()
    elif st.session_state.section == "Dashboard":
        display_dashboard()

# Update sidebar to use session state
section = st.sidebar.radio(
    "Select Section",
    ["Overview", "Geographical Context", "Regional Airport Ecosystem",
     "Route Analysis", "Comparative Analysis", "Dashboard"],
    index=["Overview", "Geographical Context", "Regional Airport Ecosystem",
          "Route Analysis", "Comparative Analysis", "Dashboard"].index(st.session_state.section)
)

# Update session state when sidebar selection changes
if section != st.session_state.section:
    st.session_state.section = section
    st.experimental_rerun()

